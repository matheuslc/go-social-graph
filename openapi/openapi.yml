openapi: 3.0.0
servers:
  - description: Social Graph Development
    url: http://localhost:3010/

info:
  version: "1.0.0"
  title: Go Social Graph API
  description: >-
    This is an example of using OAuth2 Access Code Flow in a specification to
    describe security to your API.

paths:
  /api/user:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
      - user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
  
  /api/user/{id}/follow/{from}:
    post:
      summary: Follows a user
      operationId: followHandler
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: from
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                    from:
                      type: string
                      format: uuid
      responses:
        200:
          description: OK

  /api/user/{id}/unfollow/{from}:
    post:
      summary: Unfollow a user
      operationId: unfollowHandler
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: from
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                    from:
                      type: string
                      format: uuid
      responses:
        200:
          description: OK
    
  
  /api/profile/{user_id}:
    get:
      summary: Retrieve user profile information
      operationId: profileHandler
      tags:
        - user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'

  /api/post:
    post:
      summary: Create a new post for an user
      operationId: postHandler
      tags:
        - post
      requestBody:
        description: which user and content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostResponse'


components:
  schemas:
    CreateUserIntent:
      properties:
        username:
          type: string
    
    CreateUserResponse:
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - created_at

    CreatePostRequest:
      properties:
        user_id:
          type: string
          format: uuid
        content:
          type: string
          maxLength: 144
      required:
        - user_id
        - content

    CreatePostResponse:
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
      required:
        - id
        - content
    
