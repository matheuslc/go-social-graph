openapi: 3.0.0
servers:
  - description: Social Graph Development
    url: http://social-graph.localdev.me

info:
  version: "1.0.0"
  title: Go Social Graph API

paths:
  /api/login:
    post:
      summary: Login and get a new token
      operationId: loginHandler
      tags:
        - auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /api/user:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - user
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - username
                - password
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"

  /api/user/timeline:
    get:
      summary: Retrieve the timeline for a user
      operationId: timelineHandler
      security:
        - bearerAuth:
          - 'read'
      tags:
        - user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimelineResponse"

  /api/user/follow/{from}:
    post:
      summary: Follows a user
      operationId: followHandler
      security:
        - bearerAuth:
          - 'write'
      tags:
        - user
      parameters:
        - in: path
          name: from
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK

  /api/user/unfollow/{from}:
    post:
      summary: Unfollow a user
      operationId: unfollowHandler
      security:
        - bearerAuth:
          - 'write'
      tags:
        - user
      parameters:
        - in: path
          name: from
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK

  /api/profile/{user_id}:
    get:
      summary: Retrieve user profile information
      operationId: profileHandler
      tags:
        - user
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponse"

  /api/post:
    post:
      summary: Create a new post for an user
      operationId: postHandler
      security:
        - bearerAuth:
          - 'write'
      tags:
        - post
      requestBody:
        description: which user and content
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePostResponse"
  
  /api/post/{id}/repost:
    post:
      summary: Repost an user post
      operationId: repostHandler
      security:
        - bearerAuth:
          - 'write'
      tags:
        - post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: describes the repost
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepostIntent'
      responses:
        200:
          description: OK

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateUserIntent:
      properties:
        username:
          type: string
    
    RepostIntent:
      properties:
        parent:
          type: string
          format: uuid
        quote:
          type: string
      required:
        - parent

    CreateUserResponse:
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - created_at

    CreatePostRequest:
      properties:
        content:
          type: string
          maxLength: 144
      required:
        - content

    CreatePostResponse:
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
      required:
        - id
        - content

    User:
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - created_at

    Post:
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        parent:
          $ref: '#/components/schemas/UserPost'
        quote:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - content
        - created_at

    UserPost:
      properties:
        user:
          $ref: "#/components/schemas/User"
        post:
          $ref: "#/components/schemas/Post"
      required:
        - user
        - post

    TimelineResponse:
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/UserPost"

    UserStats:
      properties:
        followers:
          type: integer
        following:
          type: integer
        posts_count:
          type: integer

    ProfileResponse:
      properties:
        user:
          $ref: "#/components/schemas/User"
        stats:
          $ref: "#/components/schemas/UserStats"
        posts:
          type: array
          items:
            $ref: "#/components/schemas/UserPost"
    
    LoginResponse:
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
