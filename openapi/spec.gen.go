// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUW/bNhD+K8Rtj2rktH3SW9ahXbABLbL2aQgKVjpZLCSSIU9JDUP/fTiKsqpatpUO",
	"bjCgTzakE++777v7jlvITWONRk0esi34vMJGhr+vHErCd8bTDd616IkfWmcsOlIYQnKjCXV40cgvf6Fe",
	"UwXZ5cuXCdDGImTgySm9hi6B1qP7qAqOLY1rJEEGbasK2IvtEnB41yqHBWT/7D5Mduluu2SCzlujPR6F",
	"twfne5AcAPHBozsCIsQUHyVNEhaS8BmpBiH5TnA9pVo2OFPgHPJdePI1KK6DaXwcfWesykoXs/7qsIQM",
	"fknHHk1jg6ZMeoDdJXDXGlpKwlDUHgc3aI2n613JUy5GUCfxL0QTT+TU71WDtdJ4uIkYWvijCBv/GG4i",
	"COmc3EDHIPjt/7NNd3XN8nOKlYGRNtZ/isFZI4Kkz3UbqFS6NHxUgT53ypIyGjJ4XykvlBdSC/wiG1uj",
	"MKVovdJr8faqpeq5uMpz9F68MgWK17V5EEoLKbzFXJUql3yQICP6cz+h8Ji3TtGGH25M68TVu+sL5lpR",
	"zXy+MeJvkytZizdO2opfQwL36HwP6fJidbHi4o1FLa2CDF6ERzxuVAUOU2lVOhA5/DLJAc51AVnwiT+k",
	"LupAhOvXwm+m2HxjF9LaOpaRfvaMYNgsp4jfXzqB6CnBD5XKK8FyCKkLMY70qBa5FoN8/USFAp+vVmfB",
	"GYd2BujbP0MT+bZppNtAFheGkELjg2CORWm4CBF7i+TaB3OIPZaMqqRbVXSpw+MK9S42amSlkw0SOj52",
	"C4pRseKQQD+S/cxNiUu+IuHUhrw9Tx9M3HiG2WEyvKAKRWRlYQOc0KhPPYgi4smHlHGmVDWm23hL6TjB",
	"Gudmp498jDTjzec/6nPWIZhcf5YMwQ2SU3iPkd+eF8FeyqXwRyPdYS5Gugfvnm/+Ec9Rd2rampSVjlLO",
	"+KyQJKc1T3fL8fUVn5hPnzGPnXqqCS+fWoCJC33jPDOE985Tmro2D+m2dKbpDmvwOoT9QANKZg9llE/l",
	"a9P2CUgWJFzUOkv8q1fAC7lYWor3z4PeNVxQf/ReOZNv7d23H+VavHAGxvr1vZjoVi+cog8x8OccPd0c",
	"DRoc1pfD0d0PmkzPm9zHf8d7rI1t+mtq62rIoCKyWZrWJpd1ZTxlL1aXqxS62+7fAAAA//8L5TKMlREA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
