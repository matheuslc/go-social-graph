// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXTW/jNhD9KwLbozZK2j3ptm2x27QLNEg26CEwAkYaW9xKJEOO7BqG/nsxJGVbtuTI",
	"XnsPvdnUkPPmvfkgVyxTlVYSJFqWrpjNCqi4+/mrAY5wpyzew2sNFmlRG6XBoABnkimJIN2Hiv/7GeQM",
	"C5bevH8fM1xqYCmzaIScsaaJmYHXWhjIWfq03jhp4o4fq5W0cNDRzsExEzktT5WpOLKU1bXI2Vv+nck+",
	"iEcL5gAIZ5M/c+w4zDnCOxQV7HuNGVRclKfDjlltwUheQc8ZfTGtzVvX8TZsivSzmgk5HCTPMrD2GdU/",
	"IHtxG5gasMWgBcEiMY8T8RRuRzKouQlefzQwZSn7IdnkfBISPiHpHewmZq+1wrGEt0Ht8Xxn1FSUMMy0",
	"VtbXnECo7DH4AixuDF/Sf4scRx3w4AxDVo3Z4OW8B8J6u1ZvJ441v29KMZLYcCKx+EVUUAr5HWgkEI+B",
	"lm+v+4tX9062rePq5ectVlpGjkiLLjq3Mfa+WjgPbVZ28UxVWaoFGLsVs5AIMzo2Dp+Jgd7PTu3nTNWd",
	"PrI2cCpayGojcPlAiL3TF+AGzIeaxlP772Mrzh9/f2Exy8FmRmgUSvq1iNdYRD5sFvvJSM787o2aBaL2",
	"6SPkVDlUAkv68klFDyoTvIw+Ga6L6MPdLYvZHIz1Tm6urq+uKSqlQXItWMp+dkvUtLBwyBOuRVJSz94W",
	"kwjlBPU2Z6lv6b9zmZcOl/Hj+heVL3eHdF2i0NxgQpn5LufIN0O/r7KtXSjTTeX14tHpHFbUy1fI0DO2",
	"ySE0NbgFX+fO/0/X1zsBcK1LkbnIk69WyS76Q2nbHXvOeVfxv/50IG1dVdwsW1YjLvNoBhjxSMIi8kMv",
	"ZshnlvKeUoRNaJ/TqZWnXyaqsjEqnR7k/pWtJ9BFIbIiIqlccJsB9v3E6LnyHVAklDNLn7qF/MQWRiCw",
	"STPZ1s0fHgQjJaKpolCj0KRa7UKz2tYuWYm8SQwc1tGPw42SmhteAbqW9rRiVKmuflnMfDH45t2lN96i",
	"6q276+Qy2dIZ6z38+38vYCMsIAqsjEyTsyjpAbbSRcH/kH7+vpWsyPZZ5A3BmEFfHXrLYwQMZ367ihcq",
	"qN3L5pj+dg9oBMwhkOtPiGiGURy0acO1K50N1+09ob8+Nm+pcw6j4ZfUmcfU7r1m5zm1Pnhy0kS7OXMT",
	"7TxZRzXR4Wa50yB7RE/89SxZTY2qmuEU+OjMjqkwOvAS5XWWRuTDsREfQxGGJ8tg/2nfNNt3gQv1hb3n",
	"00lj1gDP93tz6B40G9qQ/aQdQ1ItR2bSYzD83+RSG9AwT+5QM28D7HrtPCh+gzmUSlf+/labMjxH0iSx",
	"zu7djOyuSpXxMof5VQWsmTT/BQAA///rutbr9RMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
