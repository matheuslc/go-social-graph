// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9KwLboxIl7Z5027bYbdoFGiQb9GAYASONbW4lkiFHdg1D/70YkpItW7Ll",
	"tMm2QG+2NOK8eW++uGGZKrWSINGydMNstoCSu58/GuAIt8riHTxXYJEeaqM0GBTgTDIlEaR7UfI/P4Gc",
	"44Kl1+/exQzXGljKLBoh56yOWWXBPIqcbGfKlBxZyqpK5OzAto6ZgedKGMhZOmk/jFt30zruoLNaSQtH",
	"4R3AeQmSARAPFswREM4mf+TYcZhzhAsUJbD4heA8pZKX0BNgH/LWPN4FRXF8UnMhh0PgWQbWPqL6A2Qv",
	"mQZmBuxi0ILgkFTnSfSKzGlugtdvDcxYyr5JtnWQhCJISFgHu47Zc6VwLNFNUAc83xo1EwUMM62V9XUo",
	"EEp7Dr4AixvD1/TfIsdRB9w7w5BNYz7wct4BYb1p1duLo+X3pBQjiQ0nEoufRQmFkG9AI4F4CLT896q6",
	"jauXn1OsNIyckRaHfZvF3lcD577Jyi6emSoKtQJjd2IWEmFOx8bhNTHQ+9qp/ZipqtNHWgOnooWsMgLX",
	"94TYO33iVmTtzKNP/JNWkgWipvOfgBsw7yuabZvw70Oj4i+/f2bxzhHu7f4ZhEDImXLwBBb05qOK7lUm",
	"eBF9NFwvove3NyxmSzBWKMlSdn15dXlF7pUGybVgKfvePaLuhQsXQsK1SApq3ruqErMchZI3OUt9b/+Z",
	"y7xwuIyf5T+ofL0/wasCheYGE0rRi5wj324EfSVu7UqZbk63D8/O6/BEPX2BDD1j22RCU4F74Ave+f/u",
	"6movAK51ITIXefLFKtlFfyx/u/PPOc/BZkZo9GL89qsDaauy5GbdsBpxmUdzwIhHElaRn34xQz63VACc",
	"MmZK3zmdGnn6ZaJyG6PSy4M83Od6Al0tRLaISCoX3HaSvZ0YPZvdEUVCXbN0sukU6oStjEBg03q6q5s/",
	"PAhGSkQzRaFGoVs12oWutatdshF5nRg4rqOfi1slNTe8BHS9bbJhVKmuflnMfDH4Lt6lN96h6tSKOn2d",
	"bOnM9x7+/b8nsBEuIAqsjEyTE7XlXTeiROHkIWX8SpVswjWhJgdz6Kswb3mONNurx9/U55VKZX+fHNO5",
	"7gCNgCUEcv0JEU0nioM+2nLtimLLdbMK9Gf+9jL0Lx4z+wtK2JzaA6cvmkTX/3Dz69woRzW/4Sa319h6",
	"JPWNzS9ZyWZmVFkPq/zBmb1hf4t7DyWUX6tt7u2uhGSEw/ErzYkC9grYiI+WFsOFabA1Njeqtx5br9QW",
	"Dy6IZ/VFmmcNY347GE10JUdW0UMw/L+Ovl4dNRoM63uwX/ob48TvlGCWjVpdT51r3U+whELp0m/RlSnC",
	"pTBNEuvsLuZkd1mojBc5LC9LYPW0/isAAP//4KiYcpgVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
