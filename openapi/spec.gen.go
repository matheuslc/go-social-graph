// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RU30/bPhD/V6z7fh8DaYGnvDGmMbRJILY9TRU6kktjlNjGvhSqKv/7dE5KGyhlQkJ7",
	"amqf7c99ftwKcts4a8hwgGwFIa+owfh55gmZrmzga7pvKbAsOm8dedYUS3JrmEzcaPDxO5k5V5BNT04S",
	"4KUjyCCw12YOXQJtIH+jC6ktrW+QIYO21QW8qO0S8HTfak8FZL+fDiZPz826ZIQuOGsC7YX3As57kLwC",
	"4lcgvwdErClukEcPFsh0wLohSN4JrqfUYEM7GtyF/Kk82QY166RYm9LKNQWF3GvH2hrI4Gelg9JBoVH0",
	"iI2rSdlStUGbubo8bbk6Uqd5TiGoM1uQ+lLbB6WNQhUc5brUOcpFiq3q770lFShvvealLC5t69Xp1cWh",
	"NKe5lgbOrfphc421OvfoKtmGBBbkQw9pejg5nEjz1pFBpyGD47iUgEOuIuUpOp06Ozh2+BVNIpyLAjIQ",
	"43xFU9TkoaeKAn+yxfKZb9C5emgjvQuCYJ0R+frfUwkZ/JduQpQOCUpfxicSPSb4odJ5pUQYhaZQ64e3",
	"xWPfUlSzN1hs8Ggy+RCcg4d3AL38Fj0V2qZBv4RssL5CZehBCceqtNJEbEb0xHkQ50X6Z3K2V8XbUteU",
	"roZUdwJvTrsU6is3Ijn02BCTl3tXoAWWSA4J9CHYmhRj+pItKt5K/OzDqR6Ni7+h+prYa1pQ75OBQSWJ",
	"lVbk0IbuyP6G7vj31RBs8OzNQNPWrB16TuXFgwIZxz2PB97+qTSs2Ns7yodIvOX16b8WYOT1Z/5eEy4H",
	"yC/W7hzfOJpon2lBtXVNH/TW15BBxeyyNK1tjnVlA2fHk+kkhW7W/QkAAP//OiUrRaEHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
