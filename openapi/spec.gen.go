// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXXW/bNhT9KwS3RyVKuj7pLe2QLluBBvnAHgIjYKQri51EMiRl1zD034dLUpZly7ac",
	"LekG9M2WrnjPPed+cUlTWSkpQFhDkyU1aQEVcz8/amAWrqWxN/Bcg7H4UGmpQFsOziSVwoJwLyr27TOI",
	"qS1ocv7+fUTtQgFNqLGaiyltIlob0I88Q9tc6opZmtC65hndsm0iquG55hoymjysPoxW7iZN1ENnlBQG",
	"9sLbgvMSJDtA3BvQe0A4m+yR2Z7DjFk4sbwCGr0QnKdUsAoGAhxCvjKP1kFhHJ/llIvdIbA0BWMerfwL",
	"xCCZGnINpthpgXBQquMkekXmFNPB688acprQn+KuDuJQBDEK62A3EX2upR1LdBvUFs/XWua8hN1MK2l8",
	"HXILlTkGX4DFtGYL/G8ss6MOuHWGIZvGfODlvAHEerVSbyOOFb8HpRhJbDgRWbzjFZRcvAGNCOI+0PL/",
	"q+pVXIP8HGKlZeSItNju2zTyvlo4t21W9vHksizlHLRZi5kLC1M8NgqvkYHB107tx1TWvT6yMnAqGkhr",
	"ze3iFhF7px+AadAXNY6sJX1y/y5bcX7/845GfhriYf5tp1ZhrfLpwUUu8fsMTKq5slwKmtC7ghvCDWGC",
	"wDdWqRKIzEltuJiSL+jyHblwTZV8lBmQy1LOCReEEaMg5TlPGR5ErCT+3CcgbQT4cCFrTS6ur04REbcl",
	"Qvokya1MOSvJJ81Uga9pRGegjYd0fnp2eoZ0SQWCKU4T+ot7hN3QFo6SmCkelzgM1rMElXJ4rjKa+Fnx",
	"GxNZ6QjRfjf4ILPF5kZQl5Yrpm2MKX+SMcu6DWOoZRgzl7pfI6uHR9dJeCKfvkJqvVRdclpdg3vgG4jz",
	"/+7sbCMAplQZlIi/Gin66PfVQ3+eOuf9/PjyhwNp6qpietGySpjIyBQsYUTAnPhpGlHLpgYLimGqTvA7",
	"p1Mrz7BMWL5jVHp5kNv74UCg84KnBUGpXHDdZHw7MQY2xT2KhCqjyUO/Q/h+lmhgGZ00k3XtvIMgGqpB",
	"conhktABW/1CJ1zXL17yrIk17NfSz9pOTcU0q8C6fvmwpFitroZpRH1B+MnQpzhao+vQ2jt5nYzp7QwD",
	"GrS9zhBbAAmsjEyVA/XlXbeikHDyLmX8mhYvw9WjQQdTGKoyb3mMNN115h/q80rlsrmjjuleN2A1hxkE",
	"cv0JBEcjxoEfdVy7oui4bteL4czvLlj/4VGzufSEbWx14ORF0+j8X26AvVvqGFF7bW2jlQ2I6FuZX9Xi",
	"Za5l1ezW9dKZvWFHiwYPRZTfq1FubMCIZITD8YvMAXW9Aoaw0dLacO3a2Qzbe9lbD6pXaoRb18yjOiFO",
	"sJYxvw+MJroWI6voPhj+qKPvV0etBrv1dVulnrWa9M/rXdl+hRmUUlV+Q651GW6aSRwbZ3cyRbvTUqas",
	"zGB2WgFtJs3fAQAA///k/82mxBUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
