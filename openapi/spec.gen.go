// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9KwLboxIl7Z5027bYbdoFGiQb9BAYASONbW4lkiFHcQ1D/70YkpIsW7Ll",
	"tMm2QG+2NOK8eW++uGGZKrWSINGydMNstoSSu58/GuAI18riDTxVYJEeaqM0GBTgTDIlEaR7UfI/P4Fc",
	"4JKll+/exQzXGljKLBohF6yOWWXBPIicbOfKlBxZyqpK5GzPto6ZgadKGMhZet9+GLfuZnXcQ2e1khYO",
	"wtuD8xIkIyDuLJgDIJxN/sCx5zDnCGcoSmDxC8F5SiUvYSDAIeStebwNiuL4pBZCjofAswysfUD1B8hB",
	"Mg3MDdjlqAXBIalOk+gVmdPcBK/fGpizlH2TdHWQhCJISFgHu47ZU6VwKtFNUHs8Xxs1FwWMM62V9XUo",
	"EEp7Cr4AixvD1/TfIsdJB9w6w5BNUz7wct4AYb1q1duJo+X3qBQTiQ0nEoufRQmFkG9AI4G4C7T896q6",
	"jWuQn2OsNIyckBb7fZvF3lcD57bJyj6euSoKtQJjt2IWEmFBx8bhNTEw+Nqp/ZCpqtdHWgOnooWsMgLX",
	"t4TYO30EbsC8r2hkNf8+NOL88vtnFvtpSIf5t51aS0Tt00PIuXJeBRb05qOKblUmeBF9NFwvo/fXVyxm",
	"z2CsUJKl7PL84vyCUCsNkmvBUva9e0RNCZcOWcK1SArqydtiEWEchZJXOUt9y/6Zy7xwuIwf0T+ofL07",
	"mKsCheYGE8q8s5wj7wb9UOVau1Kmn6rtw5PTNTxRj18gQ89YlyNoKnAPfB07/99dXOwEwLUuROYiT75Y",
	"JfvoD6Vlf6w55znYzAiNXozffnUgbVWW3KwbViMu82gBGPFIwiryQy1myBeW8ppTxszoO6dTI8+wTFRF",
	"U1R6eZD7a9pAoKulyJYRSeWC6wbU24kxsLAdUCSUK0vv+4V6z1ZGILBZPdvWzR8eBCMlormiUKPQhBrt",
	"QjPa1i7ZiLxODBzW0Y+7TknNDS8BXcu63zCqVFe/LGa+GHxz7tMbb1F1bPOcvU629Mb2AP/+3yPYCJcQ",
	"BVYmpsmR2vKuG1GicPKYMn5TSjZh+6/JwQKGKsxbniJNd6P4m/q8UqnsrolTOtcNoBHwDIFcf0JE04ni",
	"oI86rl1RdFw3E34487s7zr94zOzuHWEhag+cvWgSXf7Dza93UZzU/Mab3E5jG5DUNza/OyWbuVFlPa7y",
	"B2f2hv0tHjyUUH6ttrmzkhKSCQ6nrzRHCtgrYCM+WVoM96DR1thclN56bL1SW9y7953UF2meNYz57WAy",
	"0ZWcWEV3wfD/Ovp6ddRoMK6va7HmudGkf17v8vYTPEOhdOl35coU4eqXJol1dmcLsjsvVMaLHJ7PS2D1",
	"rP4rAAD//67dhvpVFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
