// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXTW/jNhD9KwLboxIl7Z5027bYbdoFGiQb9BAYASONbW4lUhmO4hqG/nsxJGVZtuzI",
	"abxo92ZLo5k3780HuRKZKSujQZMV6UrYbA6ldD9/RpAE18bSDTzVYIkfVmgqQFLgTDKjCbR7Ucq/P4Ge",
	"0Vykl+/exYKWFYhUWEKlZ6JpYoHwVCuEXKT36w8nTdyLYyujLRwMtOU4Firnx1ODpSSRirpWuXgpvjPZ",
	"BXFnAQ+AcDb5g6RewFwSnJEqYTfqSHCxqC2gliUMJDiEfG0eb4LiPD6ZmdL7U5BZBtY+kPkL9CCZCFME",
	"O99rwXBYquMkOiFzlcQQ9XuEqUjFd0lX0Uko54SFdbCbWDzVhsYS3Sa1w/M1mqkqYD/TlbG+oxRBaY/B",
	"F2BJRLnk/5YkjXJw6wxDNY35wMt5A4z1aq3eVh5rfl+UYiSxwSOz+FmVUCj9FWhkEHeBlv9fV6/zGuTn",
	"JVZaRo4oiz4692HsY7Vwbtuq7OOZmqIwC0C7kbPSBDN2G4fXzMDga6f2Q2bq3hxZGzgVLWQ1KlreMmIf",
	"9BEkAr6vefm0/z604vz252cR+73GzvzbTq05UeXLQ+mpcVEVFfzmo4luTaZkEX1EWc2j99dXIhbPgFYZ",
	"LVJxeX5xfsGoTQVaVkqk4kf3iIcSzR2yRFYqKXgmb4rFhElSRl/lIvUj+1ep88LhQr9sfzL5cnvF1gWp",
	"SiIlXHlnuSTZreyhzrV2YbBfquuHR5dreGIev0BGnrGuRghrcA98H7v4P1xcbCUgq6pQmcs8+WKN7qM/",
	"VJb9teaC52AzVBV5Mf743YG0dVlKXLasRlLn0QwokpGGReSXWixIzizXteSKmfB3TqdWnmGZuIvGqPT6",
	"JHcPXAOJLuYqm0cslUuuW1BfT4yBA9sBRUK7ivS+36j3YoGKQEyayaZu3nkQjJWIpoZTjcIQarULw2hT",
	"u2Sl8iZBOKyjX3edkpVEWQK5kXW/Etyprn9FLHwz+OHcpzfeoOqlk+fkNNXSW9sD/Pt/j2AjmkMUWBlZ",
	"Jm+ipAfYSheF+Pv08+epZMW2DypvGMYMhvrQWx4jYPD571U8UUNtHybHzLcbIFTwDIFc7yHiHcZ58Ecd",
	"1651Oq7bc8Bwf3Q3of/wMto+nYRj09rh5FX76vKNR2TvOjlqRO4fhVvjb0DSxB+uktUUTdnsF/iDMzum",
	"f9jhKZrnTcaMT8dGcgxFFC4ce6dLeyPZ3PQn6vqdy8+rliiCzHcnb5gNPPnblP0eHUNSrUdW0l0w/GZq",
	"qU1oP0/OKT63Cfaj9q4Lv8AzFKYq/emsxiJcNtIksc7ubMZ254XJZJHD83kJopk0/wQAAP//wLKPcZET",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
