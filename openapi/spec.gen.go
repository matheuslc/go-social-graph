// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXzW7jNhB+FYHtUYmSdk+6bVvsNu0CDZINegiMgJHGFrcSyZAju4ahdy+GpCzLlm15",
	"2zgt0JtNDefn++aPK5apSisJEi1LV8xmBVTc/fzRAEe4VRbv4KUGi3SojdJgUIATyZREkO5Dxf/8BHKG",
	"BUuv372LGS41sJRZNELOWNPEzMBLLQzkLH1cX5w0cc+O1UpaOGhoS3HMRE7HU2UqjixldS1ydsy+E9l1",
	"4sGCOeCEk8mfOPYM5hzhAkUFu1ZHOhez2oKRvIKBAIc8X4vHm05RHJ/UTMj9IfAsA2ufUP0BchBMA1MD",
	"ttgrQe4QVadR9IrIaW6C1W8NTFnKvkm6jE5COidErHO7idlLrXAs0G1QOzjfGjUVJexHWivrK0ogVPYU",
	"/4Jb3Bi+pP8WOY5ScO8EQzaNueDpvAPy9WbN3lYca3yPUjES2KCRUPwsKiiFPAOM5MRDgOW/V9XruAbx",
	"OYZKi8gJadH3zl2Mva3Wnfs2K/v+TFVZqgUYuxGzkAgzUhuHz4TA4GfH9lOm6l4fWQs4Fi1ktRG4vCeP",
	"vdFn4AbM+5qGT/vvQ0vOL79/ZrGfa6TMf+3YKhC1Tw8hp8pZFVjSl48quleZ4GX00XBdRO9vb1jM5mCs",
	"UJKl7Pry6vKKvFYaJNeCpex7d0RNCQvnWcK1SErqyZtkEWAchZI3OUt9y/6Zy7x0fhk/bH9Q+XJ7xNYl",
	"Cs0NJpR5FzlH3o3socq1dqFMP1XXhyenazhRz18gQ49YlyNoanAHvo6d/e+urrYC4FqXInORJ1+skn3v",
	"D6Vlf6w54znYzAiNnozffnVO2rqquFm2qEZc5tEMMOKRhEXkh1rMkM8s5TWnjJnQPcdTS88wTVRFY1j6",
	"+iB3F66BQBeFyIqIqHLBdQPqfGQMLGwHGAnlytLHfqE+soURCGzSTDZ588oDYcRENFUUahSaUMtdaEab",
	"3CUrkTeJgcM8+nHXMam54RWga1mPK0aV6uqXxcwXg2/OfXjjDaiObZ6T18mW3tgewN//ewYbYQFRQGVk",
	"mhypLW+6JSUKmvcx4zelZEWyTyJvyMAMhirMS55CTdD59/l5pVLZXhPHdK47QCNgDgFcryGi6URx0KUO",
	"a1cUHdbthB/O/O6N8y8eM9t7R1iI1gonXzWJrv/h5td7KI5qfvub3FZjG6DUNza/OyWrqVFVs5/lD07s",
	"jP0tHlRKXr5V29xaScmTEQbHrzRHCtgzYCM+mloM76C9rbF9KJ17bL1SW9x5953UF2metYj57WA00LUc",
	"WUUPQfD/Onq7Omo52M+va7Fm3nLS19d7vP0EcyiVrvyuXJsyPP3SJLFO7mJGcpelyniZw/yyAtZMmr8C",
	"AAD//8QAHngfFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
