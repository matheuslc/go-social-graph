// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWQW/bOBP9KwS/76hYSbcn3bJdtBvsAi2S5lQEASuNLRYSyZAjp4ah/74YkrIiW7bl",
	"7jrFAntKLI3IN+/NvJk1z3VttAKFjmdr7vISauH/fWdBIHzSDm/hqQGH9NBYbcCiBB+Sa4Wg/ItafP8T",
	"1AJLnl29fZtwXBngGXdopVrwNuGNA/soC4qda1sL5BlvGlnwndg24RaeGmmh4NmXzYfJ5rqHNhmgc0Yr",
	"Bwfh7cD5ESR7QNw7sAdA+JjiUeDgwkIgXKCsgSc/CC5QqkQNIwmOId+EJy9BUR5E42n0nTErI2y89f8W",
	"5jzj/0v7Gk1jgaZEuofdJvyp0TiVhC6pXQ6snssK9gtptAs9IhFqdwq+CEtYK1b026HASQfc+cCo9JQP",
	"eEtJ3wJhvdmot5XHht+jUkwkNp5ILH6WNVRSvQKNBOI+0vLv67hNXqP8HGOlY+SEstj1VJ6Euzo4d11V",
	"DvHMdVXpZ7DuRc5SISzo2CS+JgZGX3u1H3PdDHxkE9B6GaWaa3pbgMutNCi14hn/XErHpGNCMfgualMB",
	"03PWOKkW7ON1g+Ubdp3n4Bx7pwtg7yv9zKRigjkDuZzLXNBBDDUL534F5iBvrMQVPVzpxrLrTzcz0lli",
	"Rbg+aHancykq9sEKU9JrnvAlWBcgXc0uZ5eUljaghJE847/4R+RaWHqKUmFk2onY/SVCPZybgmfebn8X",
	"qqi8CDZM1191sdpyXWFMFdNIvzlC0A3oY6Lvzm5P9JDg51LmJaNSYEIVrHfGvlLQNuBLJ3SzT/DN5eVZ",
	"cEbDGAH68Q9fwK6pa2FXPItzlwmm4JkRx2yuKQkW6xrFwnljCvXdJr0q6VoWbWrhsELBQXuNjLCiBvRd",
	"8GXNJaEixXnCgx2Efh8Sl7wg4dii8XCeOhhMghFmu85wDEtgkZWJBXBEo3B1JwqLJ+9TJgzfdB2XvZYu",
	"WMBY74TIU6TpF8i/qc+ZmmB785jSAbeAVsISIrnhBEZGSnnQRz3Xvil6rruhMV75/Up70JrqpkJphMWU",
	"brwoBIphwsMhcnhuxif66zfIY5keq8Crf9iCBjv8yRa0ZTsjhAfbCcMyXc+trtv9Grz3Ya/oPsnooYTy",
	"Z5na1g5CSCZcOKl0pphXUMAxMVlajIvvXuPqNuPXHipnMq2dRf8k16Jp0zEWZvdkohs1sYvuY+B/ffTz",
	"+qjTYL++FA522WkyPG+wjP8GS6i0qcOO2tiKZ7xENFmaOh93saC4WaVzURWwnNXA24f2rwAAAP//R38d",
	"8eISAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
