// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTU/jPBD+K9a87zGQFjjlxrKCRbsSiF1OqwqZZNIYJbaxJy1Vlf++GielDf2gC0Jc",
	"9kRwxuNnng+nc0hNZY1GTR6SOfi0wEqGxzOHkvDaeLrBxxo98aJ1xqIjhaEkNZpQhxeVfPqBekwFJMOT",
	"kwhoZhES8OSUHkMTQe3R3amMa3PjKkmQQF2rDNZqmwgcPtbKYQbJ7+eN0fNxoybqofPWaI874a3BeQuS",
	"LSBuPbodIEJNdiepd2AmCQ9IVQjRG8G1lGpZ4YYBNyF/Lo9WQY0aLlY6N9wmQ586ZUkZDQn8KpQXygup",
	"BT7JypYoTC5qr/RYXJ3WVByJ0zRF78WZyVCcl2YqlBZSeIupylUquZEgI9q+9yg8prVTNOPFmamdOL2+",
	"POThFJU8wIURP02qZCkunLQFv4YIJuh8C2l4ODgc8PDGopZWQQLHYSkCK6kIlMfSqtiazrHdX9YkwLnM",
	"IAE2zjepsxIdtFShpy8mm73wjbS27MaIHzwjWGSEn/53mEMC/8XLEMVdguL1+ASi+wRPC5UWgoURUmdi",
	"cfCqeORqDGq2BgsDHg0GH4Kz8/AGoFffg6d8XVXSzSDprC+k0DgVzLHIDQ8RhmE95diz8wL9I97bquJM",
	"rkqM512qG4Y3xk0KtZVLkax0skJCx33noBgWSw4RtCFYuSn69EUrVLyW+NGHU927Lvah+gbJKZxg65OO",
	"QcGJ5VF405LuwP6S7vDv1hAs8ezMQFWXpKx0FPOJB5kk2Z+5f+HtvpW6FXP/gGkXide8PvxsAXpef+Hv",
	"DYTHc5U1cW7K0kzjee5M1WzX4DyU/Y3L32nwaGNTRvn+3LztFu3bJyDZ48C9rDNY/6atqdsq4IXcW9pa",
	"7ynubVf4T97Pk3ehwXZ9uRzdZKFJv1/vx8hXnGBpbNV+o2tXQgIFkU3iuDSpLAvjKTkeDAcxNKPmTwAA",
	"AP//v2slD1wLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
