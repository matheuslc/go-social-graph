// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "gosocialgraph/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserReader is a mock of UserReader interface.
type MockUserReader struct {
	ctrl     *gomock.Controller
	recorder *MockUserReaderMockRecorder
}

// MockUserReaderMockRecorder is the mock recorder for MockUserReader.
type MockUserReaderMockRecorder struct {
	mock *MockUserReader
}

// NewMockUserReader creates a new mock instance.
func NewMockUserReader(ctrl *gomock.Controller) *MockUserReader {
	mock := &MockUserReader{ctrl: ctrl}
	mock.recorder = &MockUserReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReader) EXPECT() *MockUserReaderMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockUserReader) Find(userID uuid.UUID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserReaderMockRecorder) Find(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserReader)(nil).Find), userID)
}

// FindByUsername mocks base method.
func (m *MockUserReader) FindByUsername(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserReaderMockRecorder) FindByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserReader)(nil).FindByUsername), username)
}

// MockFollower is a mock of Follower interface.
type MockFollower struct {
	ctrl     *gomock.Controller
	recorder *MockFollowerMockRecorder
}

// MockFollowerMockRecorder is the mock recorder for MockFollower.
type MockFollowerMockRecorder struct {
	mock *MockFollower
}

// NewMockFollower creates a new mock instance.
func NewMockFollower(ctrl *gomock.Controller) *MockFollower {
	mock := &MockFollower{ctrl: ctrl}
	mock.recorder = &MockFollowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollower) EXPECT() *MockFollowerMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockFollower) Follow(from, to string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", from, to)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockFollowerMockRecorder) Follow(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockFollower)(nil).Follow), from, to)
}

// MockUnfollower is a mock of Unfollower interface.
type MockUnfollower struct {
	ctrl     *gomock.Controller
	recorder *MockUnfollowerMockRecorder
}

// MockUnfollowerMockRecorder is the mock recorder for MockUnfollower.
type MockUnfollowerMockRecorder struct {
	mock *MockUnfollower
}

// NewMockUnfollower creates a new mock instance.
func NewMockUnfollower(ctrl *gomock.Controller) *MockUnfollower {
	mock := &MockUnfollower{ctrl: ctrl}
	mock.recorder = &MockUnfollowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnfollower) EXPECT() *MockUnfollowerMockRecorder {
	return m.recorder
}

// Unfollow mocks base method.
func (m *MockUnfollower) Unfollow(to, from string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", to, from)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUnfollowerMockRecorder) Unfollow(to, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUnfollower)(nil).Unfollow), to, from)
}

// MockCreater is a mock of Creater interface.
type MockCreater struct {
	ctrl     *gomock.Controller
	recorder *MockCreaterMockRecorder
}

// MockCreaterMockRecorder is the mock recorder for MockCreater.
type MockCreaterMockRecorder struct {
	mock *MockCreater
}

// NewMockCreater creates a new mock instance.
func NewMockCreater(ctrl *gomock.Controller) *MockCreater {
	mock := &MockCreater{ctrl: ctrl}
	mock.recorder = &MockCreaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreater) EXPECT() *MockCreaterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreater) Create(username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreaterMockRecorder) Create(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreater)(nil).Create), username)
}

// MockUserWriter is a mock of UserWriter interface.
type MockUserWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUserWriterMockRecorder
}

// MockUserWriterMockRecorder is the mock recorder for MockUserWriter.
type MockUserWriterMockRecorder struct {
	mock *MockUserWriter
}

// NewMockUserWriter creates a new mock instance.
func NewMockUserWriter(ctrl *gomock.Controller) *MockUserWriter {
	mock := &MockUserWriter{ctrl: ctrl}
	mock.recorder = &MockUserWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserWriter) EXPECT() *MockUserWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserWriter) Create(username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserWriterMockRecorder) Create(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserWriter)(nil).Create), username)
}

// Follow mocks base method.
func (m *MockUserWriter) Follow(from, to string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", from, to)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockUserWriterMockRecorder) Follow(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUserWriter)(nil).Follow), from, to)
}

// Unfollow mocks base method.
func (m *MockUserWriter) Unfollow(to, from string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", to, from)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUserWriterMockRecorder) Unfollow(to, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUserWriter)(nil).Unfollow), to, from)
}

// MockUserReaderWriter is a mock of UserReaderWriter interface.
type MockUserReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUserReaderWriterMockRecorder
}

// MockUserReaderWriterMockRecorder is the mock recorder for MockUserReaderWriter.
type MockUserReaderWriterMockRecorder struct {
	mock *MockUserReaderWriter
}

// NewMockUserReaderWriter creates a new mock instance.
func NewMockUserReaderWriter(ctrl *gomock.Controller) *MockUserReaderWriter {
	mock := &MockUserReaderWriter{ctrl: ctrl}
	mock.recorder = &MockUserReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReaderWriter) EXPECT() *MockUserReaderWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserReaderWriter) Create(username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserReaderWriterMockRecorder) Create(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserReaderWriter)(nil).Create), username)
}

// Find mocks base method.
func (m *MockUserReaderWriter) Find(userID uuid.UUID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", userID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserReaderWriterMockRecorder) Find(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserReaderWriter)(nil).Find), userID)
}

// FindByUsername mocks base method.
func (m *MockUserReaderWriter) FindByUsername(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserReaderWriterMockRecorder) FindByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserReaderWriter)(nil).FindByUsername), username)
}

// Follow mocks base method.
func (m *MockUserReaderWriter) Follow(from, to string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", from, to)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockUserReaderWriterMockRecorder) Follow(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUserReaderWriter)(nil).Follow), from, to)
}

// Unfollow mocks base method.
func (m *MockUserReaderWriter) Unfollow(to, from string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", to, from)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUserReaderWriterMockRecorder) Unfollow(to, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUserReaderWriter)(nil).Unfollow), to, from)
}

// MockStats is a mock of Stats interface.
type MockStats struct {
	ctrl     *gomock.Controller
	recorder *MockStatsMockRecorder
}

// MockStatsMockRecorder is the mock recorder for MockStats.
type MockStatsMockRecorder struct {
	mock *MockStats
}

// NewMockStats creates a new mock instance.
func NewMockStats(ctrl *gomock.Controller) *MockStats {
	mock := &MockStats{ctrl: ctrl}
	mock.recorder = &MockStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStats) EXPECT() *MockStatsMockRecorder {
	return m.recorder
}

// CountFollowers mocks base method.
func (m *MockStats) CountFollowers(userID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFollowers", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFollowers indicates an expected call of CountFollowers.
func (mr *MockStatsMockRecorder) CountFollowers(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFollowers", reflect.TypeOf((*MockStats)(nil).CountFollowers), userID)
}

// CountFollowing mocks base method.
func (m *MockStats) CountFollowing(userID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFollowing", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFollowing indicates an expected call of CountFollowing.
func (mr *MockStatsMockRecorder) CountFollowing(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFollowing", reflect.TypeOf((*MockStats)(nil).CountFollowing), userID)
}

// CountPosts mocks base method.
func (m *MockStats) CountPosts(userID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPosts", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPosts indicates an expected call of CountPosts.
func (mr *MockStatsMockRecorder) CountPosts(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPosts", reflect.TypeOf((*MockStats)(nil).CountPosts), userID)
}
