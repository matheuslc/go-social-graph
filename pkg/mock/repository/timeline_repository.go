// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/timeline_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "gosocialgraph/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTimelineReader is a mock of TimelineReader interface.
type MockTimelineReader struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineReaderMockRecorder
}

// MockTimelineReaderMockRecorder is the mock recorder for MockTimelineReader.
type MockTimelineReaderMockRecorder struct {
	mock *MockTimelineReader
}

// NewMockTimelineReader creates a new mock instance.
func NewMockTimelineReader(ctrl *gomock.Controller) *MockTimelineReader {
	mock := &MockTimelineReader{ctrl: ctrl}
	mock.recorder = &MockTimelineReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimelineReader) EXPECT() *MockTimelineReaderMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockTimelineReader) All() ([]entity.UserPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]entity.UserPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockTimelineReaderMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockTimelineReader)(nil).All))
}

// TimelineFor mocks base method.
func (m *MockTimelineReader) TimelineFor(userID uuid.UUID) ([]entity.UserPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimelineFor", userID)
	ret0, _ := ret[0].([]entity.UserPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimelineFor indicates an expected call of TimelineFor.
func (mr *MockTimelineReaderMockRecorder) TimelineFor(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimelineFor", reflect.TypeOf((*MockTimelineReader)(nil).TimelineFor), userID)
}

// UserPosts mocks base method.
func (m *MockTimelineReader) UserPosts(userID uuid.UUID) ([]entity.UserPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPosts", userID)
	ret0, _ := ret[0].([]entity.UserPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPosts indicates an expected call of UserPosts.
func (mr *MockTimelineReaderMockRecorder) UserPosts(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPosts", reflect.TypeOf((*MockTimelineReader)(nil).UserPosts), userID)
}
