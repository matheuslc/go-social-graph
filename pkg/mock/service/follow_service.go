// Code generated by MockGen. DO NOT EDIT.
// Source: ./follow_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	service "gosocialgraph/pkg/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFollowRunner is a mock of FollowRunner interface.
type MockFollowRunner struct {
	ctrl     *gomock.Controller
	recorder *MockFollowRunnerMockRecorder
}

// MockFollowRunnerMockRecorder is the mock recorder for MockFollowRunner.
type MockFollowRunnerMockRecorder struct {
	mock *MockFollowRunner
}

// NewMockFollowRunner creates a new mock instance.
func NewMockFollowRunner(ctrl *gomock.Controller) *MockFollowRunner {
	mock := &MockFollowRunner{ctrl: ctrl}
	mock.recorder = &MockFollowRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowRunner) EXPECT() *MockFollowRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFollowRunner) Run(intent service.FollowIntent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", intent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockFollowRunnerMockRecorder) Run(intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFollowRunner)(nil).Run), intent)
}
