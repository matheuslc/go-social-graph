// Code generated by MockGen. DO NOT EDIT.
// Source: ./find_user_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	service "gosocialgraph/pkg/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFindUserRunner is a mock of FindUserRunner interface.
type MockFindUserRunner struct {
	ctrl     *gomock.Controller
	recorder *MockFindUserRunnerMockRecorder
}

// MockFindUserRunnerMockRecorder is the mock recorder for MockFindUserRunner.
type MockFindUserRunnerMockRecorder struct {
	mock *MockFindUserRunner
}

// NewMockFindUserRunner creates a new mock instance.
func NewMockFindUserRunner(ctrl *gomock.Controller) *MockFindUserRunner {
	mock := &MockFindUserRunner{ctrl: ctrl}
	mock.recorder = &MockFindUserRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindUserRunner) EXPECT() *MockFindUserRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFindUserRunner) Run(userID uuid.UUID) (service.FindUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", userID)
	ret0, _ := ret[0].(service.FindUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockFindUserRunnerMockRecorder) Run(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFindUserRunner)(nil).Run), userID)
}
