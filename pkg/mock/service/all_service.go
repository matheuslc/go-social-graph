// Code generated by MockGen. DO NOT EDIT.
// Source: ./all_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	service "gosocialgraph/pkg/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAllPostRunner is a mock of AllPostRunner interface.
type MockAllPostRunner struct {
	ctrl     *gomock.Controller
	recorder *MockAllPostRunnerMockRecorder
}

// MockAllPostRunnerMockRecorder is the mock recorder for MockAllPostRunner.
type MockAllPostRunnerMockRecorder struct {
	mock *MockAllPostRunner
}

// NewMockAllPostRunner creates a new mock instance.
func NewMockAllPostRunner(ctrl *gomock.Controller) *MockAllPostRunner {
	mock := &MockAllPostRunner{ctrl: ctrl}
	mock.recorder = &MockAllPostRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllPostRunner) EXPECT() *MockAllPostRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockAllPostRunner) Run(ctx context.Context) (service.AllPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(service.AllPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockAllPostRunnerMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAllPostRunner)(nil).Run), ctx)
}
