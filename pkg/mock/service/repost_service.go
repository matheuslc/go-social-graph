// Code generated by MockGen. DO NOT EDIT.
// Source: ./repost_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepostRunner is a mock of RepostRunner interface.
type MockRepostRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRepostRunnerMockRecorder
}

// MockRepostRunnerMockRecorder is the mock recorder for MockRepostRunner.
type MockRepostRunnerMockRecorder struct {
	mock *MockRepostRunner
}

// NewMockRepostRunner creates a new mock instance.
func NewMockRepostRunner(ctrl *gomock.Controller) *MockRepostRunner {
	mock := &MockRepostRunner{ctrl: ctrl}
	mock.recorder = &MockRepostRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepostRunner) EXPECT() *MockRepostRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRepostRunner) Run(userID, parentID uuid.UUID, quote string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", userID, parentID, quote)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockRepostRunnerMockRecorder) Run(userID, parentID, quote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRepostRunner)(nil).Run), userID, parentID, quote)
}
