// Code generated by MockGen. DO NOT EDIT.
// Source: ./unfollow_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	service "gosocialgraph/pkg/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnfolowRunner is a mock of UnfolowRunner interface.
type MockUnfolowRunner struct {
	ctrl     *gomock.Controller
	recorder *MockUnfolowRunnerMockRecorder
}

// MockUnfolowRunnerMockRecorder is the mock recorder for MockUnfolowRunner.
type MockUnfolowRunnerMockRecorder struct {
	mock *MockUnfolowRunner
}

// NewMockUnfolowRunner creates a new mock instance.
func NewMockUnfolowRunner(ctrl *gomock.Controller) *MockUnfolowRunner {
	mock := &MockUnfolowRunner{ctrl: ctrl}
	mock.recorder = &MockUnfolowRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnfolowRunner) EXPECT() *MockUnfolowRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockUnfolowRunner) Run(intent service.UnfollowIntent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", intent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockUnfolowRunnerMockRecorder) Run(intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUnfolowRunner)(nil).Run), intent)
}
