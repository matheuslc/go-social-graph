// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/user/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	user "gosocialgraph/pkg/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockReader) Find(userID string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", userID)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockReaderMockRecorder) Find(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockReader)(nil).Find), userID)
}

// FindByUsername mocks base method.
func (m *MockReader) FindByUsername(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockReaderMockRecorder) FindByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockReader)(nil).FindByUsername), username)
}

// MockFollower is a mock of Follower interface.
type MockFollower struct {
	ctrl     *gomock.Controller
	recorder *MockFollowerMockRecorder
}

// MockFollowerMockRecorder is the mock recorder for MockFollower.
type MockFollowerMockRecorder struct {
	mock *MockFollower
}

// NewMockFollower creates a new mock instance.
func NewMockFollower(ctrl *gomock.Controller) *MockFollower {
	mock := &MockFollower{ctrl: ctrl}
	mock.recorder = &MockFollowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollower) EXPECT() *MockFollowerMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockFollower) Follow(from, to string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", from, to)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockFollowerMockRecorder) Follow(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockFollower)(nil).Follow), from, to)
}

// MockUnfollower is a mock of Unfollower interface.
type MockUnfollower struct {
	ctrl     *gomock.Controller
	recorder *MockUnfollowerMockRecorder
}

// MockUnfollowerMockRecorder is the mock recorder for MockUnfollower.
type MockUnfollowerMockRecorder struct {
	mock *MockUnfollower
}

// NewMockUnfollower creates a new mock instance.
func NewMockUnfollower(ctrl *gomock.Controller) *MockUnfollower {
	mock := &MockUnfollower{ctrl: ctrl}
	mock.recorder = &MockUnfollowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnfollower) EXPECT() *MockUnfollowerMockRecorder {
	return m.recorder
}

// Unfollow mocks base method.
func (m *MockUnfollower) Unfollow(to, from string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", to, from)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUnfollowerMockRecorder) Unfollow(to, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUnfollower)(nil).Unfollow), to, from)
}

// MockCreater is a mock of Creater interface.
type MockCreater struct {
	ctrl     *gomock.Controller
	recorder *MockCreaterMockRecorder
}

// MockCreaterMockRecorder is the mock recorder for MockCreater.
type MockCreaterMockRecorder struct {
	mock *MockCreater
}

// NewMockCreater creates a new mock instance.
func NewMockCreater(ctrl *gomock.Controller) *MockCreater {
	mock := &MockCreater{ctrl: ctrl}
	mock.recorder = &MockCreaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreater) EXPECT() *MockCreaterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreater) Create(username string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreaterMockRecorder) Create(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreater)(nil).Create), username)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriter) Create(username string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWriterMockRecorder) Create(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriter)(nil).Create), username)
}

// Follow mocks base method.
func (m *MockWriter) Follow(from, to string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", from, to)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow.
func (mr *MockWriterMockRecorder) Follow(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockWriter)(nil).Follow), from, to)
}

// Unfollow mocks base method.
func (m *MockWriter) Unfollow(to, from string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", to, from)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockWriterMockRecorder) Unfollow(to, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockWriter)(nil).Unfollow), to, from)
}

// MockReaderWriter is a mock of ReaderWriter interface.
type MockReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockReaderWriterMockRecorder
}

// MockReaderWriterMockRecorder is the mock recorder for MockReaderWriter.
type MockReaderWriterMockRecorder struct {
	mock *MockReaderWriter
}

// NewMockReaderWriter creates a new mock instance.
func NewMockReaderWriter(ctrl *gomock.Controller) *MockReaderWriter {
	mock := &MockReaderWriter{ctrl: ctrl}
	mock.recorder = &MockReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderWriter) EXPECT() *MockReaderWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReaderWriter) Create(username string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", username)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReaderWriterMockRecorder) Create(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReaderWriter)(nil).Create), username)
}

// Find mocks base method.
func (m *MockReaderWriter) Find(userID string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", userID)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockReaderWriterMockRecorder) Find(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockReaderWriter)(nil).Find), userID)
}

// FindByUsername mocks base method.
func (m *MockReaderWriter) FindByUsername(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockReaderWriterMockRecorder) FindByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockReaderWriter)(nil).FindByUsername), username)
}

// MockStatsCounter is a mock of StatsCounter interface.
type MockStatsCounter struct {
	ctrl     *gomock.Controller
	recorder *MockStatsCounterMockRecorder
}

// MockStatsCounterMockRecorder is the mock recorder for MockStatsCounter.
type MockStatsCounterMockRecorder struct {
	mock *MockStatsCounter
}

// NewMockStatsCounter creates a new mock instance.
func NewMockStatsCounter(ctrl *gomock.Controller) *MockStatsCounter {
	mock := &MockStatsCounter{ctrl: ctrl}
	mock.recorder = &MockStatsCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsCounter) EXPECT() *MockStatsCounterMockRecorder {
	return m.recorder
}

// CountFollowers mocks base method.
func (m *MockStatsCounter) CountFollowers(userId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFollowers", userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFollowers indicates an expected call of CountFollowers.
func (mr *MockStatsCounterMockRecorder) CountFollowers(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFollowers", reflect.TypeOf((*MockStatsCounter)(nil).CountFollowers), userId)
}

// CountFollowing mocks base method.
func (m *MockStatsCounter) CountFollowing(userId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFollowing", userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFollowing indicates an expected call of CountFollowing.
func (mr *MockStatsCounterMockRecorder) CountFollowing(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFollowing", reflect.TypeOf((*MockStatsCounter)(nil).CountFollowing), userId)
}

// CountPosts mocks base method.
func (m *MockStatsCounter) CountPosts(userId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPosts", userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPosts indicates an expected call of CountPosts.
func (mr *MockStatsCounterMockRecorder) CountPosts(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPosts", reflect.TypeOf((*MockStatsCounter)(nil).CountPosts), userId)
}
