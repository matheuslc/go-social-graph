// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatsRunner is a mock of StatsRunner interface.
type MockStatsRunner struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRunnerMockRecorder
}

// MockStatsRunnerMockRecorder is the mock recorder for MockStatsRunner.
type MockStatsRunnerMockRecorder struct {
	mock *MockStatsRunner
}

// NewMockStatsRunner creates a new mock instance.
func NewMockStatsRunner(ctrl *gomock.Controller) *MockStatsRunner {
	mock := &MockStatsRunner{ctrl: ctrl}
	mock.recorder = &MockStatsRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRunner) EXPECT() *MockStatsRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockStatsRunner) Run(intent usecase.StatsIntent) (usecase.StatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", intent)
	ret0, _ := ret[0].(usecase.StatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockStatsRunnerMockRecorder) Run(intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStatsRunner)(nil).Run), intent)
}

// MockUnfolowRunner is a mock of UnfolowRunner interface.
type MockUnfolowRunner struct {
	ctrl     *gomock.Controller
	recorder *MockUnfolowRunnerMockRecorder
}

// MockUnfolowRunnerMockRecorder is the mock recorder for MockUnfolowRunner.
type MockUnfolowRunnerMockRecorder struct {
	mock *MockUnfolowRunner
}

// NewMockUnfolowRunner creates a new mock instance.
func NewMockUnfolowRunner(ctrl *gomock.Controller) *MockUnfolowRunner {
	mock := &MockUnfolowRunner{ctrl: ctrl}
	mock.recorder = &MockUnfolowRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnfolowRunner) EXPECT() *MockUnfolowRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockUnfolowRunner) Run(intent usecase.UnfollowIntent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", intent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockUnfolowRunnerMockRecorder) Run(intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUnfolowRunner)(nil).Run), intent)
}

// MockFollowRunner is a mock of FollowRunner interface.
type MockFollowRunner struct {
	ctrl     *gomock.Controller
	recorder *MockFollowRunnerMockRecorder
}

// MockFollowRunnerMockRecorder is the mock recorder for MockFollowRunner.
type MockFollowRunnerMockRecorder struct {
	mock *MockFollowRunner
}

// NewMockFollowRunner creates a new mock instance.
func NewMockFollowRunner(ctrl *gomock.Controller) *MockFollowRunner {
	mock := &MockFollowRunner{ctrl: ctrl}
	mock.recorder = &MockFollowRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowRunner) EXPECT() *MockFollowRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFollowRunner) Run(intent usecase.FollowIntent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", intent)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockFollowRunnerMockRecorder) Run(intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFollowRunner)(nil).Run), intent)
}

// MockFindUserRunner is a mock of FindUserRunner interface.
type MockFindUserRunner struct {
	ctrl     *gomock.Controller
	recorder *MockFindUserRunnerMockRecorder
}

// MockFindUserRunnerMockRecorder is the mock recorder for MockFindUserRunner.
type MockFindUserRunnerMockRecorder struct {
	mock *MockFindUserRunner
}

// NewMockFindUserRunner creates a new mock instance.
func NewMockFindUserRunner(ctrl *gomock.Controller) *MockFindUserRunner {
	mock := &MockFindUserRunner{ctrl: ctrl}
	mock.recorder = &MockFindUserRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindUserRunner) EXPECT() *MockFindUserRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFindUserRunner) Run(intent usecase.FindUserIntent) (usecase.FindUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", intent)
	ret0, _ := ret[0].(usecase.FindUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockFindUserRunnerMockRecorder) Run(intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFindUserRunner)(nil).Run), intent)
}

// MockUserPostRunner is a mock of UserPostRunner interface.
type MockUserPostRunner struct {
	ctrl     *gomock.Controller
	recorder *MockUserPostRunnerMockRecorder
}

// MockUserPostRunnerMockRecorder is the mock recorder for MockUserPostRunner.
type MockUserPostRunnerMockRecorder struct {
	mock *MockUserPostRunner
}

// NewMockUserPostRunner creates a new mock instance.
func NewMockUserPostRunner(ctrl *gomock.Controller) *MockUserPostRunner {
	mock := &MockUserPostRunner{ctrl: ctrl}
	mock.recorder = &MockUserPostRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPostRunner) EXPECT() *MockUserPostRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockUserPostRunner) Run(intent usecase.UserPostsIntent) (usecase.UserPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", intent)
	ret0, _ := ret[0].(usecase.UserPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockUserPostRunnerMockRecorder) Run(intent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUserPostRunner)(nil).Run), intent)
}
